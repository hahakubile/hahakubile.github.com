<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | hahakubile Blog]]></title>
  <link href="http://hahakubile.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://hahakubile.github.io/"/>
  <updated>2014-02-20T03:31:06-05:00</updated>
  <id>http://hahakubile.github.io/</id>
  <author>
    <name><![CDATA[hahakubile]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction-Optimizing Search Engines Using Clickthrough Data]]></title>
    <link href="http://hahakubile.github.io/blog/2012/07/04/introduction-optimizing-search-engines-using-clickthrough-data/"/>
    <updated>2012-07-04T10:59:00-04:00</updated>
    <id>http://hahakubile.github.io/blog/2012/07/04/introduction-optimizing-search-engines-using-clickthrough-data</id>
    <content type="html"><![CDATA[<h3>基本</h3>

<ul>
<li>Relevant docs high, less relevant docs below</li>
<li>training dat</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem-printf Std String]]></title>
    <link href="http://hahakubile.github.io/blog/2012/06/29/problem-printf-std-string/"/>
    <updated>2012-06-29T11:14:00-04:00</updated>
    <id>http://hahakubile.github.io/blog/2012/06/29/problem-printf-std-string</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">string</span> <span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">s</span><span class="o">/</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>编译错误</h3>

<ul>
<li> warning: cannot pass objects of non-POD type ‘struct std::string’ through ‘&hellip;’; callcall will abort at runtime</li>
<li> warning: format ‘%s’ expects type ‘char*’, but argument 2 has type ‘int’</li>
</ul>


<h3>原因</h3>

<ul>
<li> printf只能输出C语言内置的数据，而string不是内置的，只是一个扩展的类</li>
<li> &amp;a代表的是这个字符串的存储地址，并不是指向字符串的首地址</li>
</ul>


<h3>解决</h3>

<pre><code>printf("%s\n", a.c_str());
</code></pre>

<ul>
<li>const char *c_str();</li>
<li>c_str()提供了这样一种方法，它返回const char*类型(可读不可改)的指向字符数组的指针</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Static_cast]]></title>
    <link href="http://hahakubile.github.io/blog/2012/06/25/about-static-cast/"/>
    <updated>2012-06-25T14:06:00-04:00</updated>
    <id>http://hahakubile.github.io/blog/2012/06/25/about-static-cast</id>
    <content type="html"><![CDATA[<h3>static_cast</h3>

<pre><code>static_cast&lt;type&gt; (object);
</code></pre>

<p>The static_cast operator can be used for operations such as:</p>

<ul>
<li>Converting a pointer of a base class to a pointer of a derived class,</li>
<li>Convert numeric data types such as enums to ints or ints to floats.</li>
</ul>


<h3>示例</h3>

<pre><code>int score = 1340;

float scale = static_cast&lt;float&gt;(score) / MAX_SCORE + 1;

// 如果这样呢？会有什么不同
float scale = score / MAX_SCORE + 1;
</code></pre>

<p>需要注意的是，在基础类型转换时，并非进行四舍五入，而是直接舍去小数部分！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid Assigning Negative Numbers to Unsigned Int|short]]></title>
    <link href="http://hahakubile.github.io/blog/2012/06/25/avoid-assigning-negative-numbers-to-unsigned-short/"/>
    <updated>2012-06-25T11:57:00-04:00</updated>
    <id>http://hahakubile.github.io/blog/2012/06/25/avoid-assigning-negative-numbers-to-unsigned-short</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<pre><code>// 定义了一个int变量i，i存在为负数的情况
int i = -1; 
// 又定义了一个unsigned short or int的变量j
unsigned short j;
// 如果把i的值赋给j
j = i; 

// 会发生什么？j为65535
std::cout &lt;&lt; j &lt;&lt; std::endl;
</code></pre>

<h3>结论</h3>

<p>这是一个简单的赋值，但由于前后未注意，导致这种bug发生，试想如果后面使用下面语句进行判断的话：</p>

<pre><code>if(j &gt; 0) {
  // 这里，j本应该是-1，但由于65535&gt;0，导致错误
}
</code></pre>

<p>看到一句很有意思的话，You&rsquo;re lying to the compiler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Select All Columns Except Some in MySQL]]></title>
    <link href="http://hahakubile.github.io/blog/2012/06/16/select-all-columns-except-some-in-mysql/"/>
    <updated>2012-06-16T13:58:00-04:00</updated>
    <id>http://hahakubile.github.io/blog/2012/06/16/select-all-columns-except-some-in-mysql</id>
    <content type="html"><![CDATA[<h3>问题</h3>

<p>如果一个表有多列，要想不查询指定列（其余列都要），该如何实现？</p>

<p>在stackoverflow上有类似的问题，<a href="http://stackoverflow.com/questions/9122/select-all-columns-except-one-in-mysql/11060861#11060861">Select all columns except one in MySQL?</a></p>

<h3>实现</h3>

<pre><code>SET @database    = 'database_name';
SET @tablename   = 'table_name';
SET @cols2delete = 'col1,col2,col3';

#If you do have a lots of cols, use this sql to change group_concat_max_len
SET @@group_concat_max_len = 2048;  

SET @sql = CONCAT(
'SELECT ', 
(
    SELECT GROUP_CONCAT( IF(FIND_IN_SET(COLUMN_NAME, @cols2delete), NULL, COLUMN_NAME ) )
    FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @tablename AND TABLE_SCHEMA = @database
), 
' FROM ',
@tablename);

SELECT @sql;

PREPARE stmt1 FROM @sql;
EXECUTE stmt1;
</code></pre>

<h3>说明</h3>

<p>涉及到以下内容：</p>

<ul>
<li>从INFORMATION_SCHEMA.COLUMNS表中获取COLUMNS名称</li>
<li>GROUP_CONCAT拼接在一起</li>
<li>FIND_IN_SET判断是否在排除的列当中</li>
<li>IF语句使用</li>
<li>Mysql prepare&hellip;execute用法</li>
</ul>

]]></content>
  </entry>
  
</feed>
